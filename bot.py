import threading
from fastapi import FastAPI, HTTPException
from bs4 import BeautifulSoup
import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import uvicorn
from decouple import config
from config import BOT_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
fastapi_app = FastAPI()
BASE_URL = "https://www.wildberries.ru"

@fastapi_app.get("/trees/")
def get_christmas_trees():
    url = "https://www.wildberries.ru/catalog/0/search.aspx?search=–Ω–æ–≤–æ–≥–æ–¥–Ω—è—è+—ë–ª–∫–∞"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    response = httpx.get(url, headers=headers)

    if response.status_code != 200:
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    soup = BeautifulSoup(response.content, "html.parser")
    tree_items = soup.select(".product-card")

    trees_data = []
    for item in tree_items[:10]:
        title = item.select_one(".goods-name").get_text(strip=True) if item.select_one(".goods-name") else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        price = item.select_one(".lower-price").get_text(strip=True) if item.select_one(".lower-price") else "–¶–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        link = BASE_URL + item.select_one("a")["href"] if item.select_one("a") else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"
        trees_data.append({"title": title, "price": price, "link": link})

    return {"trees": trees_data}

# URL FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
API_URL = "http://127.0.0.1:8888/trees/"

# Telegram Bot —Ñ—É–Ω–∫—Ü–∏–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ù–∞–ø–∏—à–∏ /trees, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö –µ–ª–æ–∫ —Å Wildberries.")

async def get_trees(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö –µ–ª–∫–∞—Ö...")

    try:
        response = httpx.get(API_URL)
        data = response.json()

        if "trees" in data:
            text = "üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –µ–ª–∫–∏ –Ω–∞ Wildberries:\n\n"
            for tree in data["trees"]:
                text += f"üîπ *{tree['title']}*\n"
                text += f"üí∞ –¶–µ–Ω–∞: {tree['price']}\n"
                text += f"[–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]({tree['link']})\n\n"
        else:
            text = "–£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."

        await update.message.reply_text(text, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

def run_telegram_bot():
    telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()  # –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("trees", get_trees))

    telegram_app.run_polling()

def start_fastapi():
    uvicorn.run(fastapi_app, host="127.0.0.1", port=8888)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    fastapi_thread = threading.Thread(target=start_fastapi, daemon=True)
    fastapi_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Bot –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_telegram_bot()
